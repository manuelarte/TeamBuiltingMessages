buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.13.0'
	id 'nebula.contacts' version '3.0.1'
	id 'nebula.facet' version '3.3.0'
	id 'nebula.lint' version '7.4.0'
	id 'org.sonarqube' version '2.2.1'
}

ext {
    javaVersion = '1.8'
    snippetsDir = file('build/generated-snippets')
}

// Define the classes that should not be analysed for code coverage both in Jacoco and Sonar
def excludedClasses() {
	return [
		'**/org/manuel/teambuilting/messages/*.*'
	]
}

group 'org.manuel.teambuilting'
version '0.1.0-SNAPSHOT'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'maven-publish'

pmd {
	ignoreFailures = true
}

	findbugs {
	ignoreFailures = true
	effort = 'max'
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

jdepend {
	ignoreFailures = false
}

tasks.withType(JDepend) {
	reports {
		text.enabled = false
		xml.enabled = true
	}
}

gradleLint {
    alwaysRun = false
    criticalRules += 'archaic-wrapper'
    criticalRules += 'unused-dependency'
    rules += 'duplicate-dependency-class'
    rules += 'unused-exclude-by-dep'
}

artifacts {
	archives jar
}

contacts {
	'manuel.doncel.martos@gmail.com' {
		roles 'developer'
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Jacoco configuration, include only the classes that involve logic
jacocoTestReport {
    reports {
        html {
            enabled true
        }
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedClasses())
        })
    }
}

configurations {
	agent
	all {
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
	}
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	compile group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
	compile 'javax.inject:javax.inject:1'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'


	gradleLint.ignore('unused-dependency') {
		compileOnly 'org.projectlombok:lombok:1.16.18'
	}

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M4'
	testCompile 'org.hamcrest:hamcrest-core:1.3'
	testCompile 'org.mockito:mockito-core'

    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M4'

}

clean {
    delete 'log'
    delete 'bin'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pfd'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
    repositories {
        maven { url System.getenv( 'TEAMBUILTING_PLAYERS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_TEAMS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_SPORTS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_MATCHES' ) + '/repo' }
    }
}

task stage {
    dependsOn build
}